---
description: 
globs: 
alwaysApply: true
---

## 业务逻辑
- 根据刑事案件办案程序规定，开发一个刑事文件分析的网站。分析这些文件的内容，是否有不一致，证据缺乏，逻辑矛盾的地方。
    1. 证据链完整性检查（物证/书证/证人证言对应关系）
    2. 法律条文适用性验证（罪名与法条匹配度）
    3. 时间线逻辑校验（侦查/批捕/起诉时间节点合规性）


## 系统架构设计

```mermaid
graph TD
  A[前端Next.js] --> B[API路由]
  B --> C[AI服务层]
  C --> D[OpenManus API]
  C --> E[SQLite数据库]
  C --> F[临时文件系统]
```
## 技术栈
- next.js
- react
- typescript
- 使用shadcn/ui构建专业级法律系统UI
- 后端使用 python
- 数据库使用sqlite数据库

## 前端页面展示
    - 左侧为文件列表，中间为文件内容，右侧为聊天交互窗口，用来展示文件分析结果。
    - 文件内容展示区、文件列表区、聊天窗口区，三个区域之间有明显的分隔线，可以调整这三个区域的大小
    - 读取 `business` 文件夹下的文件，展示在左侧的文件列表，实现类IDE的文件树，文件列表栏支持缩进
    - 点击左侧的文件，中间展示文件内容，因为文档是 md 格式，需要使用 markdown 解析器来解析，渲染。使用虚拟滚动技术处理长文档。
    - 在右侧聊天窗口，可以和大模型进行交互，可以就文档的内容进行提问
    - 页面上方有标题，标题为刑事案件文件分析系统
    - 页面上方右侧有开启/关闭聊天窗口的按钮
    - 页面下方有版权信息，版权信息为河南公安

## 聊天窗口交互逻辑 
- 在右侧聊天窗口，可以和大模型进行交互，可以就文档的内容进行提问，按照 deepsearch 的方式来进行回答
    1.  用户在聊天窗口的输入框输入问题，点击提交按钮
    2.  先分析用户问题，然后生成一个 todo 列表
    3.  然后根据 todo 列表，自动完成列表中的任务，在对话框中要显示当前正在完成的任务，当子任务完成后，显示子任务的处理过程和中间结果。并更新 todo 列表
    4.  最后合并所有子任务的结果，返回分析结果
    5.  中间结果和最终结果，需要有文档的引用。点击可以跳转到文档的对应位置。
- 聊天窗口右上方有历史图标，点击会弹出历史记录，点击历史记录，聊天窗口加载历史记录
- 聊天窗口右上方有关闭按钮，点击关闭按钮，关闭聊天窗口
- 聊天窗口右上方有新建按钮，点击新建按钮，打开一个新窗口，用于创建新的聊天记录
- 聊天窗口右上方有清空按钮，点击清空按钮，清空聊天记录

## 数据
- 数据可以是 mock 的，数据在 `business` 文件夹下

## 后端代码逻辑
- 使用 openmanus 来实现后端的 Agent 功能，openmanus 的 githu地址为：https://github.com/mannaandpoem/OpenManus.git
- openmanus是由 python 来实现的






